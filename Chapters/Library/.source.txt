//==============================================================================
//                        RetroGameDev Library C64 v2.01
//==============================================================================
// Includes

#importonce
#import "libDefines.asm"

//==============================================================================
// Constants

.label SpriteAnimsMax = 8

//==============================================================================

spriteAnimsActive:              .fill SpriteAnimsMax, 0
spriteAnimsStartFrame:          .fill SpriteAnimsMax, 0
spriteAnimsFrame:               .fill SpriteAnimsMax, 0
spriteAnimsEndFrame:            .fill SpriteAnimsMax, 0
spriteAnimsStopFrame:           .fill SpriteAnimsMax, 0
spriteAnimsSpeed:               .fill SpriteAnimsMax, 0
spriteAnimsDelay:               .fill SpriteAnimsMax, 0
spriteAnimsLoop:                .fill SpriteAnimsMax, 0
spriteAnimsCurrent:             .byte 0
spriteAnimsFrameCurrent:        .byte 0
spriteAnimsEndFrameCurrent:     .byte 0
spriteNumberMask:               .byte %00000001, %00000010, %00000100, %00001000, %00010000, %00100000, %01000000, %10000000

//==============================================================================
// Macros

.macro LIBSPRITE_DIDCOLLIDESP_A(bSprite)
{
    ldy bSprite             // bSprite -> Y
    lda spriteNumberMask,y  // spriteNumberMask[Y] -> A
    and SPSPCL              // Mask the sprite collision register
}

//==============================================================================

.macro LIBSPRITE_ENABLE_AV(bSprite, bEnable)
{
    ldy bSprite
    lda spriteNumberMask,y
    .if (bEnable)   // Build-time condition (not run-time)
    {
        ora SPENA   // Merge with the current sprite enable register
    }
    else
    {
        eor #$FF    // Get mask compliment   
    }
    sta SPENA       // Set the new value into the sprite enable register
}

//==============================================================================        

.macro LIBSPRITE_ENABLEALL_V(bEnable)
{
    .if (bEnable)   // Build-time condition (not run-time)
    {
        lda #$FF    // $FF -> A
    }
    else
    {
        lda #0      // 0 -> A
    }
    sta SPENA       // Set the new value into the sprite enable register
}

//==============================================================================

.macro LIBSPRITE_MULTICOLORENABLEALL_V(bEnable)
{        
    .if (bEnable)    // Build-time condition (not run-time)
    {
        lda #$FF    // $FF -> A
    }
    else
    {
        lda #0      // 0 -> A
    }
    sta SPMC        // Set the new value into the sprite collision register
}

//==============================================================================

.macro LIBSPRITE_PLAYANIM_AAAVV(bSprite, bStartFrame, bEndFrame, bSpeed, bLoop)
{
    ldy bSprite

    // If was inactive then needs update
    lda spriteAnimsActive,y
    beq changed

    // If different start frame then needs update
    lda spriteAnimsStartFrame,y
    cmp bStartFrame
    bne changed

    // If different end frame then needs update
    lda spriteAnimsEndFrame,y
    cmp bEndFrame
    bne changed

    // Else doesn't need update, skip to end
    jmp end

    // Update sprite variables 
changed:
    lda #True
    sta spriteAnimsActive,y
    lda bStartFrame
    sta spriteAnimsStartFrame,y
    sta spriteAnimsFrame,y
    lda bEndFrame
    sta spriteAnimsEndFrame,y
    lda #bSpeed
    sta spriteAnimsSpeed,y
    sta spriteAnimsDelay,y
    .if (bLoop)
    {
        lda #1
    }
    else 
    {
        lda #0
    }
    sta spriteAnimsLoop,y
end:
}

//==============================================================================

.macro LIBSPRITE_PLAYANIM_AVVVV(bSprite, bStartFrame, bEndFrame, bSpeed, bLoop)
{
    ldy bSprite

    // If was inactive then needs update
    lda spriteAnimsActive,y
    beq changed

    // If different start frame then needs update
    lda spriteAnimsStartFrame,y
    cmp #bStartFrame
    bne changed

    // If different end frame then needs update
    lda spriteAnimsEndFrame,y
    cmp #bEndFrame
    bne changed

    // Else doesn't need update, skip to end
    jmp end

    // Update sprite variables
changed:
    lda #1
    sta spriteAnimsActive,y
    lda #bStartFrame
    sta spriteAnimsStartFrame,y
    sta spriteAnimsFrame,y
    lda #bEndFrame
    sta spriteAnimsEndFrame,y
    lda #bSpeed
    sta spriteAnimsSpeed,y
    sta spriteAnimsDelay,y
    .if (bLoop)
    {
        lda #1
    }
    else 
    {
        lda #0
    }
    sta spriteAnimsLoop,y
end:
}

//==============================================================================

.macro LIBSPRITE_SETCOLOR_AA(bSprite, bColor)
{
    ldy bSprite     // bSprite -> Y
    lda bColor      // bColor -> A
    sta SP0COL,y    // A -> sprite[Y] color register
}

//==============================================================================

.macro LIBSPRITE_SETCOLOR_AV(bSprite, bColor)
{
    ldy bSprite     // bSprite -> Y
    lda #bColor     // bColor -> A
    sta SP0COL,y    // A -> sprite[Y] color register
}

//==============================================================================

.macro LIBSPRITE_SETCOLOR_VV(bSprite, bColor)
{
    ldy #bSprite    // bSprite -> Y
    lda #bColor     // bColor -> A
    sta SP0COL,y    // A -> sprite[Y] color register
}

//==============================================================================

.macro LIBSPRITE_SETALLCOLORS_V(bColor)
{
    lda #bColor     // bColor -> A
    sta SP0COL      // A -> sprite[0] color register
    sta SP0COL+1    // A -> sprite[1] color register
    sta SP0COL+2    // A -> sprite[2] color register
    sta SP0COL+3    // A -> sprite[3] color register
    sta SP0COL+4    // A -> sprite[4] color register
    sta SP0COL+5    // A -> sprite[5] color register
    sta SP0COL+6    // A -> sprite[6] color register
    sta SP0COL+7    // A -> sprite[7] color register
}

//==============================================================================

.macro LIBSPRITE_SETFRAME_AA(bSprite, bIndex)
{
    ldy bSprite

    // stop any animation
    lda #0
    sta spriteAnimsActive,y
    
    clc             // Clear carry before add
    lda bIndex      // Get first number
    adc #SPRITERAM  // Add
    sta SPRITE0PTR,y
}

//==============================================================================

.macro LIBSPRITE_SETFRAME_AV(bSprite, bIndex)
{                                       
    ldy bSprite
    lda #0                  // stop any animation
    sta spriteAnimsActive,y
    clc                     // Clear carry before add
    lda #bIndex             // Get first number
    adc #SPRITERAM          // Add
    sta SPRITE0PTR,y
}

//==============================================================================

.macro LIBSPRITE_SETFRAME_VV(bSprite, bIndex)
{                                       
    ldy #bSprite
    lda #0                  // stop any animation
    sta spriteAnimsActive,y
    clc                     // Clear carry before add
    lda #bIndex             // Get first number
    adc #SPRITERAM          // Add
    sta SPRITE0PTR,y
}

//============================================================================== 

.macro LIBSPRITE_SETMULTICOLORS_VV(bColor1, bColor2)
{                                     
    lda #bColor1    // bColor1 -> A
    sta SPMC0       // A -> sprite multicolor register 0
    lda #bColor2    // bColor2 -> A
    sta SPMC1       // A -> sprite multicolor register 1
}    

//==============================================================================

.macro LIBSPRITE_SETPOSITION_AAA(bSprite, wXPos, bYPos)
{                                    
    lda bSprite     // get sprite number
    asl             // X2 as registers laid out 2 apart
    tay             // copy accumulator to y register
    lda wXPos       // get XPos Low Byte
    sta SP0X,y      // set the XPos sprite register
    lda bYPos       // get YPos
    sta SP0Y,y      // set the YPos sprite register
    ldy bSprite
    lda spriteNumberMask,y // get sprite mask
    eor #$FF        // get compliment
    and MSIGX       // clear the bit
    sta MSIGX       // and store
    lda wXPos+1     // get XPos High Byte
    beq end         // skip if XPos High Byte is zero
    lda spriteNumberMask,y  // get sprite mask
    ora MSIGX       // set the bit
    sta MSIGX       // and store
end:
}

//==============================================================================

.macro LIBSPRITE_SETPOSITION_AAV(bSprite, wXPos, bYPos)
{                                    
    lda bSprite     // get sprite number
    asl             // X2 as registers laid out 2 apart
    tay             // copy accumulator to y register
    lda wXPos       // get XPos Low Byte
    sta SP0X,y      // set the XPos sprite register
    lda #bYPos      // get YPos
    sta SP0Y,y      // set the YPos sprite register
    ldy bSprite
    lda spriteNumberMask,y // get sprite mask
    eor #$FF        // get compliment
    and MSIGX       // clear the bit
    sta MSIGX       // and store
    lda wXPos+1     // get XPos High Byte
    beq end         // skip if XPos High Byte is zero
    lda spriteNumberMask,y  // get sprite mask
    ora MSIGX       // set the bit
    sta MSIGX       // and store
end:
}

//==============================================================================

.macro LIBSPRITE_SETPOSITION_VAV(bSprite, wXPos, bYPos)
{                                    
    lda #bSprite    // get sprite number
    asl             // X2 as registers laid out 2 apart
    tay             // copy accumulator to y register
    lda wXPos       // get XPos Low Byte
    sta SP0X,y      // set the XPos sprite register
    lda #bYPos      // get YPos
    sta SP0Y,y      // set the YPos sprite register
    ldy #bSprite
    lda spriteNumberMask,y // get sprite mask
    eor #$FF        // get compliment
    and MSIGX       // clear the bit
    sta MSIGX       // and store
    lda wXPos+1     // get XPos High Byte
    beq end         // skip if XPos High Byte is zero
    lda spriteNumberMask,y  // get sprite mask
    ora MSIGX       // set the bit
    sta MSIGX       // and store
end:
}

//==============================================================================

.macro LIBSPRITE_STOPANIM_A(bSprite)
{
    ldy bSprite                 // bSprite -> Y
    lda #0                      // 0 -> A
    sta spriteAnimsActive,y     // A -> spriteAnimsActive[Y]
}

//==============================================================================

.macro LIBSPRITE_UPDATE()
{
    ldx #0
loop:
    // skip this sprite anim if not active
    lda spriteAnimsActive,X
    bne active
    jmp skip
active:

    stx spriteAnimsCurrent
    lda spriteAnimsFrame,X
    sta spriteAnimsFrameCurrent

    lda spriteAnimsEndFrame,X
    sta spriteAnimsEndFrameCurrent

    ldy spriteAnimsCurrent
    clc     // Clear carry before add
    lda spriteAnimsFrameCurrent  // Get first number
    adc #SPRITERAM // Add
    sta SPRITE0PTR,y

    dec spriteAnimsDelay,X
    bne skip

    // reset the delay
    lda spriteAnimsSpeed,X
    sta spriteAnimsDelay,X

    // change the frame
    inc spriteAnimsFrame,X

    // check if reached the end frame
    lda spriteAnimsEndFrameCurrent
    cmp spriteAnimsFrame,X
    bcs skip

    // check if looping
    lda spriteAnimsLoop,X
    beq destroy

    // reset the frame
    lda spriteAnimsStartFrame,X
    sta spriteAnimsFrame,X
    jmp skip

destroy:
    // turn off
    lda #0
    sta spriteAnimsActive,X
    LIBSPRITE_ENABLE_AV(spriteAnimsCurrent, false)

skip:
    // loop for each sprite anim
    inx
    cpx #SpriteAnimsMax
    bne loop
}
